package com.miracle.mft.operations;

import static org.junit.Assert.*;

import java.sql.SQLException;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.InvalidResultSetAccessException;
import org.springframework.jdbc.core.JdbcTemplate;

import com.miracle.mft.model.TransferLog;
import com.miracle.mft.operation.utils.TransferLogRowMapper;

@RunWith(PowerMockRunner.class)
public class TransferFileLogOperationsTest {
	@Mock
	private JdbcTemplate jdbcTemplate;
	@Mock
	private TransferLogRowMapper transferLogRowMapper;

	
	private List<TransferLog> transferLogs;
	@InjectMocks
	TransferFileLogOperations transferFileLogOperations;
	@Test
	public void testgetQueueManagers() {
		PowerMockito.when(jdbcTemplate.query(
				"SELECT TRANSFER.JOB_NAME AS JOBNAME,TRANSFER.TRANSFER_ID AS TRANSFERID ,TRANSFER.RESULTCODE AS OVERALLRESULT,TRANSFER_START.SOURCE_AGENT AS SOURCESYSTEM,TRANSFER_START.DESTINATION_AGENT AS TARGETSYSTEM,TRANSFER.RESULTTEXT AS OVERALLRESULTTEXT,TRANSFER_START.ACTION_TIME AS STARTTIME,TRANSFER_END.ACTION_TIME AS ENDTIME,COALESCE(TRANSFER_ITEM.SOURCE_FILENAME,'') AS SOURCEFILE,COALESCE(TRANSFER_ITEM.SOURCE_FILE_SIZE, 0) AS SOURCEFILESIZE,COALESCE(TRANSFER_ITEM.DESTINATION_FILE_SIZE, 0) AS DESTINATIONFILESIZE,COALESCE(TRANSFER_START.TRANSFERSET_SIZE, 0) AS NUMBEROFFILES,COALESCE(transfer_item.DESTINATION_FILENAME, '') AS DESTINATIONFILE,TRANSFER_ITEM.RESULTCODE AS FILERESULT,COALESCE(TRANSFER_ITEM.RESULT_TEXT, '') AS FILERESULTMESSAGE,TRANSFER.STATUS AS STATUS FROM FTELOG.TRANSFER TRANSFER inner join FTELOG.TRANSFER_EVENT TRANSFER_START on TRANSFER_START.ID = TRANSFER.START_ID and TRANSFER_START.ACTION_TIME >= 'startTime' inner join FTELOG.TRANSFER_EVENT TRANSFER_END on TRANSFER_END.ID = TRANSFER.COMPLETE_ID AND TRANSFER_END.ACTION_TIME <= 'EndTime' inner join FTELOG.TRANSFER_ITEM TRANSFER_ITEM on TRANSFER_ITEM.TRANSFER_ID = TRANSFER.TRANSFER_ID where TRANSFER.JOB_NAME LIKE 'JobName' ORDER BY TRANSFER_START.ACTION_TIME DESC WITH UR",
				transferLogRowMapper)).thenReturn(null);
		assertEquals(200, transferFileLogOperations.getTransferLog("startTime","EndTime","JobName").getStatusCodeValue());

	}

	@Test
	public void testgetQueueManagersException() {
		PowerMockito.doThrow(new InvalidResultSetAccessException(new SQLException())).when(jdbcTemplate).query(
				"SELECT TRANSFER.JOB_NAME AS JOBNAME,TRANSFER.TRANSFER_ID AS TRANSFERID ,TRANSFER.RESULTCODE AS OVERALLRESULT,TRANSFER_START.SOURCE_AGENT AS SOURCESYSTEM,TRANSFER_START.DESTINATION_AGENT AS TARGETSYSTEM,TRANSFER.RESULTTEXT AS OVERALLRESULTTEXT,TRANSFER_START.ACTION_TIME AS STARTTIME,TRANSFER_END.ACTION_TIME AS ENDTIME,COALESCE(TRANSFER_ITEM.SOURCE_FILENAME,'') AS SOURCEFILE,COALESCE(TRANSFER_ITEM.SOURCE_FILE_SIZE, 0) AS SOURCEFILESIZE,COALESCE(TRANSFER_ITEM.DESTINATION_FILE_SIZE, 0) AS DESTINATIONFILESIZE,COALESCE(TRANSFER_START.TRANSFERSET_SIZE, 0) AS NUMBEROFFILES,COALESCE(transfer_item.DESTINATION_FILENAME, '') AS DESTINATIONFILE,TRANSFER_ITEM.RESULTCODE AS FILERESULT,COALESCE(TRANSFER_ITEM.RESULT_TEXT, '') AS FILERESULTMESSAGE,TRANSFER.STATUS AS STATUS FROM FTELOG.TRANSFER TRANSFER inner join FTELOG.TRANSFER_EVENT TRANSFER_START on TRANSFER_START.ID = TRANSFER.START_ID and TRANSFER_START.ACTION_TIME >= 'startTime' inner join FTELOG.TRANSFER_EVENT TRANSFER_END on TRANSFER_END.ID = TRANSFER.COMPLETE_ID AND TRANSFER_END.ACTION_TIME <= 'EndTime' inner join FTELOG.TRANSFER_ITEM TRANSFER_ITEM on TRANSFER_ITEM.TRANSFER_ID = TRANSFER.TRANSFER_ID where TRANSFER.JOB_NAME LIKE 'JobName' ORDER BY TRANSFER_START.ACTION_TIME DESC WITH UR",
				transferLogRowMapper);
		assertEquals(400, transferFileLogOperations.getTransferLog("startTime","EndTime","JobName").getStatusCodeValue());

	}
}
